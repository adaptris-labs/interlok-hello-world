name: Publish

on:
  push:
    branches:
      - master

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Set up JDK 11.0
      uses: actions/setup-java@v2.1.0
      with:
        java-version: 11.0
        distribution: 'adopt'
    - name: Gradle Wrapper Cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}
    - name: Gradle Dependencies Cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}
    - name: Dependency Check Cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/dependency-check-data
        key: ${{ runner.os }}-dependency-check-data-${{ hashFiles('**/build.gradle') }}
    - name: Create GitHub deployment
      id: deployment
      uses: chrnorm/deployment-action@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        environment: interlok-hello-world
    - name: Gradle Check, Install & Sonar
      run: |
        ./gradlew -Dorg.gradle.console=plain --no-daemon -PverboseTests=true check sonarqube installDist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to Heroku
      uses: docker/login-action@v1 
      with:
        registry: registry.heroku.com
        username: "_"
        password: ${{ secrets.HEROKU_KEY }}
    - name: Docker Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          adaptrislabs/interlok-hello-world:latest
          registry.heroku.com/interlok-hello-world/web:latest
    - name: Inspect
      id: inspect
      run: |
        docker pull registry.heroku.com/interlok-hello-world/web:latest
        echo "::set-output name=HEROKU_WEB_DOCKER_IMAGE_ID::$(docker inspect registry.heroku.com/interlok-hello-world/web:latest --format={{.Id}})"
    - name: Update Heroku
      uses: fjogeleit/http-request-action@master
      with:
        url: https://api.heroku.com/apps/interlok-hello-world/formation
        method: PATCH
        bearerToken: ${{ secrets.HEROKU_KEY }}
        customHeaders: |
          { "Accept": "application/vnd.heroku+json; version=3.docker-releases" }
        data: |
          { "updates": [ { "type": "web", "docker_image": "${{ steps.inspect.outputs.HEROKU_WEB_DOCKER_IMAGE_ID }}" } ] }
    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        environment_url: https://interlok-hello-world.herokuapp.com
        state: success
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        environment_url: https://interlok-hello-world.herokuapp.com
        state: failure
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
